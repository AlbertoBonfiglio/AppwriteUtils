# yaml-language-server: $schema=./.appwrite/appwriteUtilsConfigSchema.json
appwriteEndpoint: 'https://appwrite.blackleafdigital.com/v1' # Your Appwrite endpoint
appwriteProject: '65f31b9f540542961b39' # Your Appwrite project
appwriteKey: '1cad63dd844ab118a256127d0c7e8348b8a123302793255969ae2239e78d41d521f3ab58ff40ae443c399e803058e64588fe80aac407be57e2a8f8682b3819f27773556483b28d4c1d757ae40fcb7157aa876be43f8e359126c33c5d55a2ff4c31031ef2073b964d80fdb0d868c34798bfdc39e34ccd19d7096465ef2bc13209' # Your Appwrite API key (needs storage and databases at minimum)
appwriteClient: null # Your Appwrite client -- don't worry about this
enableDevDatabase: true # Enable development database alongside main
enableBackups: true # Enable backups
backupInterval: 3600 # Backup interval in seconds
backupRetention: 30 # Backup retention in days
enableBackupCleanup: true # Enable backup cleanup
enableMockData: false # Enable mock data generation
enableWipeOtherDatabases: true # Enable wiping other databases
documentBucketId: 'documents' # Your Appwrite bucket ID for documents
usersCollectionName: 'Members' # Your Appwrite collection for any extra info while importing members (if any)
                               # This allows you to use any targetKey in the users field to create your user
                               # these are: name, email, phone, labels, prefs, password, userId and (not yet added)
                               # $createdAt, $updatedAt -- Add them to your attributeMappings to define them and set the
                               # targetKey to the same as the Appwrite targetKey
databases:
  - $id: 'main'
    name: 'Main'
  - $id: 'staging'
    name: 'Staging'
  - $id: 'dev'
    name: 'Development'
collections:
  - name: 'Members'
    $permissions:
      - permission: read
        target: any
      - permission: create
        target: users
      - permission: update
        target: users
      - permission: delete
        target: users
    attributes:
      - key: 'idOrig'
        type: 'string'
        size: 255
        required: false
      - key: 'dogs'
        type: 'relationship'
        relatedCollection: 'Dogs'
        relationType: 'oneToMany'
        twoWay: true
        twoWayKey: 'owner'
        side: 'parent'
        onDelete: 'cascade'
        importMapping: { originalIdField: 'idOrig', targetField: 'ownerIdOrig' }
      - key: 'dogIds'
        type: 'string'
        size: 255
        array: true
      - key: 'profilePhoto'
        type: 'string'
        size: 255
        required: false
      - key: 'profilePhotoTest'
        type: 'string'
        size: 255
        required: false
    indexes:
      - key: 'idOrig_index'
        type: 'key'
        attributes: ['idOrig']
    importDefs:
      - filePath: 'importData/members.json'
        basePath: 'RECORDS'
        attributeMappings:
          - oldKey: 'id'
            targetKey: 'idOrig'
            converters: ['anyToString']
            postImportActions:
              - action: 'checkAndUpdateFieldInDocument'
                params:
                  - "{dbId}"
                  - "{collId}"
                  - "{docId}"
                  - "idOrig"
                  - "{id}"
                  - "{$id}"
          - oldKey: 'name'
            targetKey: 'name'
          - oldKey: 'email'
            targetKey: 'email'
          - oldKey: 'doesntMatter'
            targetKey: 'profilePhoto'
            fileData: { name: "profilePhoto_{id}", path: "importData/profilePhotos" }
          - oldKey: 'photoUrl'
            targetKey: 'profilePhotoTest'
            fileData: { name: "profilePhotoTest_{id}", path: "{photoUrl}" }
  - name: 'Dogs'
    $permissions:
      - permission: read
        target: any
      - permission: create
        target: users
      - permission: update
        target: users
      - permission: delete
        target: users
    attributes:
      - key: 'name'
        type: 'string'
        size: 255
        required: true
      - key: 'breed'
        type: 'string'
        size: 255
        required: false
      - key: 'age'
        type: 'integer'
        required: false
        min: 0
        max: 100
      - key: 'idOrig'
        type: 'string'
        size: 20
        required: false
      - key: 'ownerIdOrig'
        type: 'string'
        size: 255
        required: false
      - key: 'vetRecords'
        type: 'string'
        size: 255
        required: false
      - key: 'vetRecordIds'
        type: 'string'
        size: 255
        array: true
        required: false
    indexes:
      - key: 'ownerIdIndex'
        type: 'key'
        attributes: ['ownerIdOrig']
    importDefs:
      - filePath: 'importData/dogs.json'
        basePath: 'RECORDS'
        attributeMappings:
          - oldKey: 'id'
            targetKey: 'idOrig'
          - oldKey: 'name'
            targetKey: 'name'
          - oldKey: 'breed'
            targetKey: 'breed'
          - oldKey: 'age'
            targetKey: 'age'
          - oldKey: 'ownerId'
            targetKey: 'ownerIdOrig'
          - oldKey: 'vetRecords'
            targetKey: 'vetRecords'
            converters: ['stringifyObject']
          - oldKey: 'vetRecords.[any].id'
            targetKey: 'vetRecordIds'
            converters: ['anyToString']
      - filePath: 'importData/dogs.json'
        basePath: 'RECORDS'
        type: 'update'
        updateMapping: { originalIdField: 'id', targetField: 'idOrig' }
        attributeMappings:
          - oldKey: 'name'
            targetKey: 'name'
          - oldKey: 'breed'
            targetKey: 'breed'
          - oldKey: 'age'
            targetKey: 'age'