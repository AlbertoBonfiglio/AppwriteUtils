{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "appwriteEndpoint": {
      "type": "string",
      "default": "https://cloud.appwrite.io/v1",
      "description": "The endpoint URL for the Appwrite server"
    },
    "appwriteProject": {
      "type": "string",
      "description": "The project ID for the Appwrite project"
    },
    "appwriteKey": {
      "type": "string",
      "description": "The API key for accessing Appwrite services"
    },
    "appwriteClient": {
      "type": ["object", "null"],
      "default": null,
      "description": "The client configuration for Appwrite, should be null, used in the package"
    },
    "enableDevDatabase": {
      "type": "boolean",
      "default": true,
      "description": "Enable development database alongside production database"
    },
    "enableBackups": {
      "type": "boolean",
      "default": true,
      "description": "Enable backups"
    },
    "backupInterval": {
      "type": "number",
      "default": 3600,
      "description": "Backup interval in seconds"
    },
    "backupRetention": {
      "type": "number",
      "default": 30,
      "description": "Backup retention in days"
    },
    "enableBackupCleanup": {
      "type": "boolean",
      "default": true,
      "description": "Enable backup cleanup"
    },
    "enableMockData": {
      "type": "boolean",
      "default": false,
      "description": "Enable mock data"
    },
    "enableWipeOtherDatabases": {
      "type": "boolean",
      "default": true,
      "description": "Enable wiping other databases"
    },
    "documentBucketId": {
      "type": "string",
      "default": "documents",
      "description": "Documents bucket id for imported documents"
    },
    "usersCollectionName": {
      "type": "string",
      "default": "Members",
      "description": "Users collection name for any overflowing data associated with users, will try to match one of the collections by name"
    },
    "databases": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "$id": {
            "type": "string",
            "description": "The unique identifier for a database"
          },
          "name": {
            "type": "string",
            "description": "The name of the database"
          }
        },
        "required": ["$id", "name"],
        "description": "The schema for database objects. Each database must have a unique identifier and a name."
      },
      "default": [
        { "$id": "dev", "name": "Development" },
        { "$id": "main", "name": "Main" },
        { "$id": "migrations", "name": "Migrations" }
      ],
      "description": "List of databases to create, with each database identified by its $id."
    },
    "collections": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "$id": {
            "type": "string",
            "description": "The id of the collection, if not provided it will be generated"
          },
          "name": {
            "type": "string",
            "description": "The name of the collection"
          },
          "$permissions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "permission": {
                  "type": "string",
                  "enum": ["read", "write", "update", "delete", "create"],
                  "description": "The type of permission (read, write, update, delete, create)"
                },
                "target": {
                  "type": "string",
                  "description": "The target of the permission"
                }
              },
              "description": "Permissions associated with the collection"
            }
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether the collection is enabled or not"
          },
          "documentSecurity": {
            "type": "boolean",
            "default": false,
            "description": "Whether document security is enabled for the collection"
          },
          "databaseId": {
            "type": "string",
            "description": "The ID of the database the collection belongs to"
          },
          "attributes": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The key of the attribute"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["string"],
                      "description": "The type of the attribute"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether the attribute is required"
                    },
                    "array": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether the attribute is an array"
                    },
                    "size": {
                      "type": "number",
                      "default": 50,
                      "description": "The size of the attribute"
                    },
                    "xdefault": {
                      "type": ["string", "null"],
                      "description": "The default value of the attribute"
                    },
                    "encrypted": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether the attribute is encrypted"
                    }
                  },
                  "required": ["key", "type"],
                  "description": "Schema for a string attribute"
                },
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The unique identifier for the attribute"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["integer"],
                      "description": "Specifies the attribute type as an integer"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the attribute is required"
                    },
                    "array": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the attribute should be treated as an array"
                    },
                    "min": {
                      "type": "number",
                      "description": "The minimum value for the attribute, applicable for numeric types"
                    },
                    "max": {
                      "type": "number",
                      "description": "The maximum value for the attribute, applicable for numeric types"
                    },
                    "xdefault": {
                      "type": ["number", "null"],
                      "description": "The default value for the attribute, if not provided by the user"
                    }
                  },
                  "required": ["key", "type"],
                  "description": "Schema for an integer attribute, including range constraints"
                },
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The unique identifier for the attribute"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["float"],
                      "description": "Specifies the attribute type as a float"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the attribute is required"
                    },
                    "array": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the attribute should be treated as an array"
                    },
                    "min": {
                      "type": "number",
                      "description": "The minimum value for the attribute, applicable for numeric types"
                    },
                    "max": {
                      "type": "number",
                      "description": "The maximum value for the attribute, applicable for numeric types"
                    },
                    "xdefault": {
                      "type": ["number", "null"],
                      "description": "The default value for the attribute, if not provided by the user"
                    }
                  },
                  "required": ["key", "type"],
                  "description": "Schema for a float attribute, including range constraints"
                },
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The unique identifier for the attribute"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["boolean"],
                      "description": "Specifies the attribute type as a boolean"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the attribute is required"
                    },
                    "array": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the attribute should be treated as an array"
                    },
                    "xdefault": {
                      "type": ["boolean", "null"],
                      "description": "The default value for the attribute, if not provided by the user"
                    }
                  },
                  "required": ["key", "type"],
                  "description": "Schema for a boolean attribute"
                },
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The unique identifier for the attribute"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["datetime"],
                      "description": "Specifies the attribute type as a datetime"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the attribute is required"
                    },
                    "array": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the attribute should be treated as an array"
                    },
                    "xdefault": {
                      "type": ["string", "null"],
                      "description": "The default value for the attribute, if not provided by the user, in ISO 8601 format"
                    }
                  },
                  "required": ["key", "type"],
                  "description": "Schema for a datetime attribute"
                },
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The unique identifier for the attribute"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["email"],
                      "description": "Specifies the attribute type as an email"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the attribute is required"
                    },
                    "array": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the attribute should be treated as an array"
                    },
                    "xdefault": {
                      "type": ["string", "null"],
                      "description": "The default value for the attribute, if not provided by the user"
                    }
                  },
                  "required": ["key", "type"],
                  "description": "Schema for an email attribute"
                },
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The unique identifier for the attribute"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["ip"],
                      "description": "Specifies the attribute type as an IP address"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the attribute is required"
                    },
                    "array": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the attribute should be treated as an array"
                    },
                    "xdefault": {
                      "type": ["string", "null"],
                      "description": "The default value for the attribute, if not provided by the user"
                    }
                  },
                  "required": ["key", "type"],
                  "description": "Schema for an IP address attribute"
                },
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The unique identifier for the URL attribute"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["url"],
                      "description": "Specifies the attribute type as a URL"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the URL attribute is required"
                    },
                    "array": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the URL attribute should be treated as an array"
                    },
                    "xdefault": {
                      "type": ["string", "null"],
                      "description": "The default value for the URL attribute, if not provided by the user"
                    }
                  },
                  "required": ["key", "type"],
                  "description": "Schema for a URL attribute"
                },
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The unique identifier for the enum attribute"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["enum"],
                      "description": "Specifies the attribute type as an enumeration"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the enum attribute is required"
                    },
                    "array": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the enum attribute should be treated as an array"
                    },
                    "elements": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "Defines the allowed values for the enumeration"
                    },
                    "xdefault": {
                      "type": ["string", "null"],
                      "description": "The default value for the enum attribute, if not provided by the user"
                    }
                  },
                  "required": ["key", "type", "elements"],
                  "description": "Schema for an enumeration attribute"
                },
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The unique identifier for the relationship attribute"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["relationship"],
                      "description": "Specifies the attribute type as a relationship"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the relationship attribute is required"
                    },
                    "array": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the relationship attribute should be treated as an array"
                    },
                    "relatedCollection": {
                      "type": "string",
                      "description": "Specifies the collection that this relationship is linked to"
                    },
                    "relationType": {
                      "type": "string",
                      "enum": [
                        "oneToOne",
                        "oneToMany",
                        "manyToOne",
                        "manyToMany"
                      ],
                      "description": "Defines the type of relationship"
                    },
                    "twoWay": {
                      "type": "boolean",
                      "default": false,
                      "description": "Indicates whether the relationship is two-way"
                    },
                    "twoWayKey": {
                      "type": "string",
                      "nullable": true,
                      "description": "Specifies the key for the two-way relationship, if applicable"
                    },
                    "onDelete": {
                      "type": "string",
                      "enum": ["cascade", "setNull", "restrict"],
                      "default": "restrict",
                      "description": "Defines the action to take when the related entity is deleted"
                    },
                    "side": {
                      "type": "string",
                      "enum": ["parent", "child"],
                      "nullable": true,
                      "description": "Specifies which side of the relationship this entity is on"
                    },
                    "importMapping": {
                      "type": "object",
                      "nullable": true,
                      "properties": {
                        "originalIdField": {
                          "type": "string",
                          "description": "The field in the import data representing the original ID to match"
                        },
                        "targetField": {
                          "type": "string",
                          "description": "The field in the target collection that matches the original ID. Optional, defaults to the same as originalIdField if not provided",
                          "default": ""
                        }
                      },
                      "required": ["originalIdField"],
                      "description": "Configuration for mapping and resolving relationships during data import"
                    }
                  },
                  "required": [
                    "key",
                    "type",
                    "relatedCollection",
                    "relationType"
                  ],
                  "description": "Schema for a relationship attribute"
                }
              ]
            },
            "default": []
          },
          "indexes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": ["key", "unique", "fulltext"],
                  "default": "key"
                },
                "status": {
                  "type": "string"
                },
                "error": {
                  "type": "string",
                  "nullable": true
                },
                "attributes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "orders": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true
                }
              },
              "required": ["key", "type", "attributes"]
            }
          }
        },
        "required": ["name", "attributes"]
      },
      "default": [],
      "description": "Collections to create, $id is the id of the collection, it'll always check by collection name and $id for existing before creating another"
    },
    "importDefs": {
      "type": "array",
      "description": "Defines the parameters and rules for importing data into collections, including document creation and updates.",
      "items": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["create", "update"],
            "default": "create",
            "description": "The type of import action, if update you should set an object for the originalIdField and targetField"
          },
          "filePath": {
            "type": "string",
            "description": "The file path of the data to import"
          },
          "basePath": {
            "type": "string",
            "description": "The base path of the import e.g. if you have JSON, and the array is in the RECORDS object, then this would be RECORDS, if nothing then leave it gone"
          },
          "primaryKeyField": {
            "type": "string",
            "default": "id",
            "description": "The field in the import data representing the primary key for this import data (if any)"
          },
          "idMappings": {
            "type": "array",
            "description": "The id mappings for the attribute to map ID's to",
            "items": {
              "type": "object",
              "properties": {
                "sourceField": {
                  "type": "string",
                  "description": "The key of the data in the import data to match in the current data (this collection import data)"
                },
                "fieldToSet": {
                  "type": "string",
                  "description": "The field to set in the target collection, if different from sourceField"
                },
                "targetField": {
                  "type": "string",
                  "description": "The field in the target collection to match with sourceField that will then be updated"
                },
                "targetCollection": {
                  "type": "string",
                  "description": "The collection to search"
                }
              },
              "required": ["sourceField", "targetField", "targetCollection"]
            }
          },
          "updateMapping": {
            "type": "object",
            "description": "Configuration for mapping and resolving the update during data import",
            "properties": {
              "originalIdField": {
                "type": "string",
                "description": "The field in the import data representing the original ID to match"
              },
              "targetField": {
                "type": "string",
                "description": "The field in the target collection that matches the original ID. Optional, defaults to the same as originalIdField if not provided"
              }
            }
          },
          "attributeMappings": {
            "type": "array",
            "description": "Defines how attributes from the source data should be mapped to attributes in the destination collection. This includes specifying the source attribute ('oldKey' or 'oldKeys' for multiple source attributes), the destination attribute ('targetKey'), and any necessary conversions or validations. For example, mapping 'id' from the source to 'idOrig' in the destination, or combining 'firstName' and 'lastName' into a single 'name' attribute.",
            "items": {
              "type": "object",
              "properties": {
                "oldKey": {
                  "type": "string",
                  "description": "The key of the attribute in the source data. Used when mapping a single source attribute to a destination attribute. For instance, 'id' from the source could be mapped to 'idOrig' in the destination."
                },
                "oldKeys": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "An array of keys from the source data. Used when multiple source attributes need to be combined or transformed before mapping to a destination attribute. For example, combining 'firstName' and 'lastName' into a single 'fullName' attribute in the destination."
                },
                "targetKey": {
                  "type": "string",
                  "description": "The key of the attribute in the destination collection that the source data should be mapped to. For example, 'idOrig' as the destination key for the source 'id'."
                },
                "fileData": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the file related to the attribute. Supports template strings for dynamic file names based on source data attributes, such as using '{id}' to include the source 'id' in the file name."
                    },
                    "path": {
                      "type": "string",
                      "description": "The path where the file related to the attribute is located. Supports template strings for dynamic paths based on source data attributes, such as using '{id}' to construct a file path that includes the source 'id'."
                    }
                  },
                  "required": ["name", "path"]
                },
                "converters": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "A list of converters to apply to the source data before mapping it to the destination attribute. Converters transform the data format or value. For example, a 'stringifyObject' converter might convert an object to a JSON string.",
                  "default": []
                },
                "validationActions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string"
                      },
                      "params": {
                        "type": "array",
                        "description": "Template parameters to use for the action. Use {key} for the actual key in the data, or {dbId}, {collectionId}, {currentDoc}, {currentDocId}. For non-templates, just use the value. These actions and parameters allow for dynamic processing of data post-import, such as validation or transformation based on specific rules.",
                        "items": {
                          "oneOf": [
                            {
                              "type": "string",
                              "pattern": "^\\{.*\\}$"
                            },
                            {
                              "type": "string"
                            }
                          ]
                        }
                      }
                    },
                    "required": ["action", "params"]
                  },
                  "description": "The after import actions and parameter placeholders (they'll be replaced with the actual data) to use for the import. This allows for dynamic post-processing of imported data, such as applying specific validations or transformations.",
                  "default": []
                },
                "postImportActions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "description": "Specifies the type of action to be performed after the import process. Actions can include data transformation, validation, or any custom logic defined."
                      },
                      "params": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "pattern": "^\\{.*\\}$",
                              "description": "Defines the parameters for the action, using placeholders that will be replaced with actual data during the import process. This allows for dynamic parameterization based on the imported data."
                            },
                            "description": "An array of parameters for the action, supporting dynamic placeholders for flexibility in post-import processing."
                          },
                          {
                            "type": "string",
                            "description": "Defines the parameters for the action, using placeholders that will be replaced with actual data during the import process. This allows for dynamic parameterization based on the imported data."
                          },
                          {
                            "type": "object",
                            "additionalProperties": {
                              "type": ["string", "number", "boolean", "null"]
                            },
                            "description": "Defines the parameters for the action, using placeholders that will be replaced with actual data during the import process. This allows for dynamic parameterization based on the imported data."
                          }
                        ]
                      }
                    },
                    "required": ["action", "params"],
                    "description": "An object representing a single post-import action, including the action type and its parameters."
                  },
                  "description": "Defines a list of actions to be executed after the import process, allowing for additional data processing or validation.",
                  "default": []
                }
              },
              "oneOf": [
                {
                  "required": ["oldKey", "targetKey"],
                  "description": "Specifies that the mapping must include a direct mapping from an old key to a target key."
                },
                {
                  "required": ["oldKeys", "targetKey"],
                  "description": "Specifies that the mapping can include a mapping from multiple old keys to a single target key, allowing for data consolidation."
                }
              ]
            }
          }
        },
        "required": ["filePath", "basePath", "attributeMappings"],
        "description": "Defines the required fields for the import configuration, including the file path, base path, and attribute mappings to guide the import process."
      }
    }
  },
  "required": ["appwriteEndpoint", "appwriteProject", "appwriteKey"],
  "description": "The root level of the schema, requiring the basic configuration for connecting to an Appwrite project, including endpoint, project ID, and API key."
}
